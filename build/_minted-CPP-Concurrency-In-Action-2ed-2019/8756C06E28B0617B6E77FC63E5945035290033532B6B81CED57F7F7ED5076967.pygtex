\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{namespace}\PYG{+w}{ }\PYG{n+nn}{messaging}
\PYG{p}{\PYGZob{}}
\PYG{+w}{  }\PYG{k}{template}\PYG{o}{\PYGZlt{}}\PYG{k}{typename}\PYG{+w}{ }\PYG{n+nc}{PreviousDispatcher}\PYG{p}{,}\PYG{k}{typename}\PYG{+w}{ }\PYG{n+nc}{Msg}\PYG{p}{,}\PYG{k}{typename}\PYG{+w}{ }\PYG{n+nc}{Func}\PYG{o}{\PYGZgt{}}
\PYG{+w}{  }\PYG{k}{class}\PYG{+w}{ }\PYG{n+nc}{TemplateDispatcher}
\PYG{+w}{  }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{n}{queue}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{q}\PYG{p}{;}
\PYG{+w}{    }\PYG{n}{PreviousDispatcher}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{prev}\PYG{p}{;}
\PYG{+w}{    }\PYG{n}{Func}\PYG{+w}{ }\PYG{n}{f}\PYG{p}{;}
\PYG{+w}{    }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{chained}\PYG{p}{;}

\PYG{+w}{    }\PYG{n}{TemplateDispatcher}\PYG{p}{(}\PYG{n}{TemplateDispatcher}\PYG{+w}{ }\PYG{k}{const}\PYG{o}{\PYGZam{}}\PYG{p}{)}\PYG{o}{=}\PYG{k}{delete}\PYG{p}{;}
\PYG{+w}{    }\PYG{n}{TemplateDispatcher}\PYG{o}{\PYGZam{}}\PYG{+w}{ }\PYG{k}{operator}\PYG{o}{=}\PYG{p}{(}\PYG{n}{TemplateDispatcher}\PYG{+w}{ }\PYG{k}{const}\PYG{o}{\PYGZam{}}\PYG{p}{)}\PYG{o}{=}\PYG{k}{delete}\PYG{p}{;}

\PYG{+w}{    }\PYG{k}{template}\PYG{o}{\PYGZlt{}}\PYG{k}{typename}\PYG{+w}{ }\PYG{n+nc}{Dispatcher}\PYG{p}{,}\PYG{k}{typename}\PYG{+w}{ }\PYG{n+nc}{OtherMsg}\PYG{p}{,}\PYG{k}{typename}\PYG{+w}{ }\PYG{n+nc}{OtherFunc}\PYG{o}{\PYGZgt{}}
\PYG{+w}{    }\PYG{k}{friend}\PYG{+w}{ }\PYG{k}{class}\PYG{+w}{ }\PYG{n+nc}{TemplateDispatcher}\PYG{p}{;}\PYG{+w}{  }\PYG{c+c1}{// 所有特化的TemplateDispatcher类型实例都是友元类}

\PYG{+w}{    }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{wait\PYGZus{}and\PYGZus{}dispatch}\PYG{p}{()}
\PYG{+w}{    }\PYG{p}{\PYGZob{}}
\PYG{+w}{      }\PYG{k}{for}\PYG{p}{(;;)}
\PYG{+w}{      }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{k}{auto}\PYG{+w}{ }\PYG{n}{msg}\PYG{o}{=}\PYG{n}{q}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{wait\PYGZus{}and\PYGZus{}pop}\PYG{p}{();}
\PYG{+w}{        }\PYG{k}{if}\PYG{p}{(}\PYG{n}{dispatch}\PYG{p}{(}\PYG{n}{msg}\PYG{p}{))}\PYG{+w}{  }\PYG{c+c1}{// 1 如果消息处理过后，会跳出循环}
\PYG{+w}{          }\PYG{k}{break}\PYG{p}{;}
\PYG{+w}{      }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n+nf}{dispatch}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{message\PYGZus{}base}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{k}{const}\PYG{o}{\PYGZam{}}\PYG{+w}{ }\PYG{n}{msg}\PYG{p}{)}
\PYG{+w}{    }\PYG{p}{\PYGZob{}}
\PYG{+w}{      }\PYG{k}{if}\PYG{p}{(}\PYG{n}{wrapped\PYGZus{}message}\PYG{o}{\PYGZlt{}}\PYG{n}{Msg}\PYG{o}{\PYGZgt{}*}\PYG{+w}{ }\PYG{n}{wrapper}\PYG{o}{=}
\PYG{+w}{         }\PYG{k}{dynamic\PYGZus{}cast}\PYG{o}{\PYGZlt{}}\PYG{n}{wrapped\PYGZus{}message}\PYG{o}{\PYGZlt{}}\PYG{n}{Msg}\PYG{o}{\PYGZgt{}*\PYGZgt{}}\PYG{p}{(}\PYG{n}{msg}\PYG{p}{.}\PYG{n}{get}\PYG{p}{()))}\PYG{+w}{  }\PYG{c+c1}{// 2 检查消息类型，并且调用函数}
\PYG{+w}{      }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{f}\PYG{p}{(}\PYG{n}{wrapper}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{contents}\PYG{p}{);}
\PYG{+w}{        }\PYG{k}{return}\PYG{+w}{ }\PYG{n+nb}{true}\PYG{p}{;}
\PYG{+w}{      }\PYG{p}{\PYGZcb{}}
\PYG{+w}{      }\PYG{k}{else}
\PYG{+w}{      }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{k}{return}\PYG{+w}{ }\PYG{n}{prev}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{dispatch}\PYG{p}{(}\PYG{n}{msg}\PYG{p}{);}\PYG{+w}{  }\PYG{c+c1}{// 3 链接到之前的调度器上}
\PYG{+w}{      }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{  }\PYG{k}{public}\PYG{o}{:}
\PYG{+w}{    }\PYG{n}{TemplateDispatcher}\PYG{p}{(}\PYG{n}{TemplateDispatcher}\PYG{o}{\PYGZam{}\PYGZam{}}\PYG{+w}{ }\PYG{n}{other}\PYG{p}{)}\PYG{o}{:}
\PYG{+w}{        }\PYG{n}{q}\PYG{p}{(}\PYG{n}{other}\PYG{p}{.}\PYG{n}{q}\PYG{p}{),}\PYG{n}{prev}\PYG{p}{(}\PYG{n}{other}\PYG{p}{.}\PYG{n}{prev}\PYG{p}{),}\PYG{n}{f}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{move}\PYG{p}{(}\PYG{n}{other}\PYG{p}{.}\PYG{n}{f}\PYG{p}{)),}
\PYG{+w}{        }\PYG{n}{chained}\PYG{p}{(}\PYG{n}{other}\PYG{p}{.}\PYG{n}{chained}\PYG{p}{)}
\PYG{+w}{    }\PYG{p}{\PYGZob{}}
\PYG{+w}{      }\PYG{n}{other}\PYG{p}{.}\PYG{n}{chained}\PYG{o}{=}\PYG{n+nb}{true}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{n}{TemplateDispatcher}\PYG{p}{(}\PYG{n}{queue}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{q\PYGZus{}}\PYG{p}{,}\PYG{n}{PreviousDispatcher}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{prev\PYGZus{}}\PYG{p}{,}\PYG{n}{Func}\PYG{o}{\PYGZam{}\PYGZam{}}\PYG{+w}{ }\PYG{n}{f\PYGZus{}}\PYG{p}{)}\PYG{o}{:}
\PYG{+w}{        }\PYG{n}{q}\PYG{p}{(}\PYG{n}{q\PYGZus{}}\PYG{p}{),}\PYG{n}{prev}\PYG{p}{(}\PYG{n}{prev\PYGZus{}}\PYG{p}{),}\PYG{n}{f}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{forward}\PYG{o}{\PYGZlt{}}\PYG{n}{Func}\PYG{o}{\PYGZgt{}}\PYG{p}{(}\PYG{n}{f\PYGZus{}}\PYG{p}{)),}\PYG{n}{chained}\PYG{p}{(}\PYG{n+nb}{false}\PYG{p}{)}
\PYG{+w}{    }\PYG{p}{\PYGZob{}}
\PYG{+w}{      }\PYG{n}{prev\PYGZus{}}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{chained}\PYG{o}{=}\PYG{n+nb}{true}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{k}{template}\PYG{o}{\PYGZlt{}}\PYG{k}{typename}\PYG{+w}{ }\PYG{n+nc}{OtherMsg}\PYG{p}{,}\PYG{k}{typename}\PYG{+w}{ }\PYG{n+nc}{OtherFunc}\PYG{o}{\PYGZgt{}}
\PYG{+w}{    }\PYG{n}{TemplateDispatcher}\PYG{o}{\PYGZlt{}}\PYG{n}{TemplateDispatcher}\PYG{p}{,}\PYG{n}{OtherMsg}\PYG{p}{,}\PYG{n}{OtherFunc}\PYG{o}{\PYGZgt{}}
\PYG{+w}{    }\PYG{n}{handle}\PYG{p}{(}\PYG{n}{OtherFunc}\PYG{o}{\PYGZam{}\PYGZam{}}\PYG{+w}{ }\PYG{n}{of}\PYG{p}{)}\PYG{+w}{  }\PYG{c+c1}{// 4 可以链接其他处理器}
\PYG{+w}{    }\PYG{p}{\PYGZob{}}
\PYG{+w}{      }\PYG{k}{return}\PYG{+w}{ }\PYG{n}{TemplateDispatcher}\PYG{o}{\PYGZlt{}}
\PYG{+w}{          }\PYG{n}{TemplateDispatcher}\PYG{p}{,}\PYG{n}{OtherMsg}\PYG{p}{,}\PYG{n}{OtherFunc}\PYG{o}{\PYGZgt{}}\PYG{p}{(}
\PYG{+w}{          }\PYG{n}{q}\PYG{p}{,}\PYG{k}{this}\PYG{p}{,}\PYG{n}{std}\PYG{o}{::}\PYG{n}{forward}\PYG{o}{\PYGZlt{}}\PYG{n}{OtherFunc}\PYG{o}{\PYGZgt{}}\PYG{p}{(}\PYG{n}{of}\PYG{p}{));}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{o}{\PYGZti{}}\PYG{n}{TemplateDispatcher}\PYG{p}{()}\PYG{+w}{ }\PYG{k}{noexcept}\PYG{p}{(}\PYG{n+nb}{false}\PYG{p}{)}\PYG{+w}{  }\PYG{c+c1}{// 5 这个析构函数也是noexcept(false)的}
\PYG{+w}{    }\PYG{p}{\PYGZob{}}
\PYG{+w}{      }\PYG{k}{if}\PYG{p}{(}\PYG{o}{!}\PYG{n}{chained}\PYG{p}{)}
\PYG{+w}{      }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{wait\PYGZus{}and\PYGZus{}dispatch}\PYG{p}{();}
\PYG{+w}{      }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{  }\PYG{p}{\PYGZcb{};}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
